#include <iostream>class MyString{private:	char* _str;	int strlen(const char* str) const {		int length = 0;		while (str[length] != '\0') {			++length;		}		return length;	}	void strcpy(char* str1, const char* str2) const {		int i = 0;		while (str2[i] != '\0') {			str1[i] = str2[i];			++i;		}		str1[i] = '\0';	}public:	//Default constructor	MyString()	{		_str = nullptr;	}	//Constructor	MyString(const char* str)	{		_str = new char[strlen(str) + 1];		strcpy(_str, str);	}	//Copy constructor	MyString(const MyString& other) : _str(other._str) {		if (other._str)		{			_str = new char[strlen(other._str) + 1];			strcpy(_str, other._str);		}		else {			_str = nullptr;		}	}	// Destructor	~MyString()	{		delete[] _str;	}	//Operator Overloading	MyString& operator=(const MyString& other)	{		if (this != &other)		{			delete[] _str;			_str = other._str;			if (other._str)			{				_str = new char[strlen(other._str) + 1];				strcpy(_str, other._str);			}			else			{				_str = nullptr;			}		}		return *this;	}	MyString operator+(const MyString& other) const {		int len1 = length();		int len2 = other.length();		char* new_str = new char[len1 + len2 + 1];		for (int i = 0; i < len1; ++i) {			new_str[i] = _str[i];		}		for (int i = 0; i < len2; ++i) {			new_str[len1 + i] = other._str[i];		}		new_str[len1 + len2] = '\0';		MyString result;		delete[] result._str;		result._str = new_str;		return result;	}	int length() const { return strlen(_str); }	void append(const MyString& other) {		int len1 = length();		int len2 = other.length();		char* str = new char[len1 + len2 + 1];		for (int i = 0; i < len1; ++i) {			str[i] = _str[i];		}		for (int i = 0; i < len2; ++i) {			str[len1 + i] = other._str[i];		}		str[len1 + len2] = '\0';		delete[] _str;		_str = str;	}	MyString substring(int start, int len) const {		if (start < 0 || start >= length() || len <= 0) return MyString();		int sub_len = (start + len > length()) ? length() - start : len;		MyString result;		delete[] result._str;		result._str = new char[sub_len + 1];		for (int i = 0; i < sub_len; ++i) {			result._str[i] = _str[start + i];		}		result._str[sub_len] = '\0';		return result;	}	int find(const char* substr) const {		int len1 = length();		int len2 = strlen(substr);		if (len2 == 0 || len2 > len1) return -1;		for (int i = 0; i <= len1 - len2; ++i) {			int j = 0;			while (j < len2 && _str[i + j] == substr[j]) {				++j;			}			if (j == len2) return i;		}		return -1;	}	void to_upper() {		for (int i = 0; _str[i] != '\0'; ++i) {			if (_str[i] >= 'a' && _str[i] <= 'z') {				_str[i] = _str[i] - 'a' + 'A';			}		}	}	void display() const {		std::cout << _str << std::endl;	}};int main(){	MyString str1("Hello");	MyString str2(" World");		std::cout << str1.length() << std::endl;	MyString str3 = str1 + str2;	str3.display();	str1.append(str2);	str1.display();  	str1.substring(6, 5).display();	std::cout << str1.find("World") << std::endl;  	str1.to_upper();	str1.display(); 	return 0;}